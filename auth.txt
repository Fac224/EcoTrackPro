# backend/main.py
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'  # Using SQLite for simplicity in Replit
db = SQLAlchemy(app)
ma = Marshmallow(app)

# --- Database Models ---

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(60), nullable=False)
    listings = db.relationship('Driveway', backref='owner', lazy=True)
    bookings = db.relationship('Booking', backref='user', lazy=True)

class Driveway(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    owner_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)
    price_hourly = db.Column(db.Float, nullable=False)
    availability_start = db.Column(db.DateTime, nullable=False)
    availability_end = db.Column(db.DateTime, nullable=False)

class Booking(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    driveway_id = db.Column(db.Integer, db.ForeignKey('driveway.id'), nullable=False)
    start_time = db.Column(db.DateTime, nullable=False)
    end_time = db.Column(db.DateTime, nullable=False)

# --- Marshmallow Schemas for Serialization ---

class UserSchema(ma.Schema):
    class Meta:
        fields = ('id', 'email')

class DrivewaySchema(ma.Schema):
    class Meta:
        fields = ('id', 'owner_id', 'address', 'latitude', 'longitude', 'price_hourly', 'availability_start', 'availability_end')

class BookingSchema(ma.Schema):
    class Meta:
        fields = ('id', 'user_id', 'driveway_id', 'start_time', 'end_time')

user_schema = UserSchema()
users_schema = UserSchema(many=True)
driveway_schema = DrivewaySchema()
driveways_schema = DrivewaySchema(many=True)
booking_schema = BookingSchema()
bookings_schema = BookingSchema(many=True)

# --- API Endpoints ---

@app.route('/api/driveways', methods=['GET'])
def get_driveways():
    all_driveways = Driveway.query.all()
    return jsonify(driveways_schema.dump(all_driveways))

@app.route('/api/driveways', methods=['POST'])
def add_driveway():
    address = request.json['address']
    latitude = request.json['latitude']
    longitude = request.json['longitude']
    price_hourly = request.json['price_hourly']
    availability_start_str = request.json['availability_start']
    availability_end_str = request.json['availability_end']
    owner_id = request.json['owner_id'] # In a real app, this would come from the logged-in user

    availability_start = datetime.fromisoformat(availability_start_str)
    availability_end = datetime.fromisoformat(availability_end_str)

    new_driveway = Driveway(address=address, latitude=latitude, longitude=longitude, price_hourly=price_hourly, availability_start=availability_start, availability_end=availability_end, owner_id=owner_id)
    db.session.add(new_driveway)
    db.session.commit()
    return jsonify(driveway_schema.dump(new_driveway)), 201

# Add more endpoints for users, bookings, etc.

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True, host='0.0.0.0', port=8080)